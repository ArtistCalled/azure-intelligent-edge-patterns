# syntax = docker/dockerfile:experimental
# =========================================================
# Base
# =========================================================
FROM arm64v8/python:3.8-slim-buster

WORKDIR /app
ENV LANG en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ARG SYSTEM_CORES=8

# =========================================================
# Install system packages
# =========================================================
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    wget \
    unzip \
    yasm \
    pkg-config \
    libtbb2 \
    libtbb-dev \
    libpq-dev \
    libprotobuf-dev \
    protobuf-compiler \
    libgeos-dev \
    unzip \
    && rm -rf /var/lib/apt/lists/*
# protobuf-compiler:   https://github.com/onnx/onnx#build-onnx-on-arm-64
# libprotobuf-dev:     https://github.com/onnx/onnx#build-onnx-on-arm-64
# libgeos-dev:         Shapely



# =========================================================
# Install Python package
# =========================================================
WORKDIR /app

RUN echo "/usr/bin/make --jobs=${SYSTEM_CORES} \$@" > /usr/local/bin/make && \
    chmod 755 /usr/local/bin/make
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install wheel cython protobuf
COPY requirements/base.txt ./requirements/base.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install $(cat ./requirements/base.txt | grep numpy)
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements/base.txt

# =========================================================
# Install onnxruntime
# =========================================================
ARG ONNXRUNTIME_REPO="https://github.com/Microsoft/onnxruntime"
ARG ONNXRUNTIME_SERVER_BRANCH="rel-1.5.2"

WORKDIR /code

RUN git clone \
    --single-branch \
    --branch ${ONNXRUNTIME_SERVER_BRANCH} \
    --recursive ${ONNXRUNTIME_REPO} onnxruntime && \
    cd onnxruntime && \
    /bin/sh ./build.sh \
    --use_openmp \
    --config Release \
    --build_wheel \
    --update \
    --build \
    --parallel \
    --cmake_extra_defines ONNXRUNTIME_VERSION=$(cat ./VERSION_NUMBER) && \
    pip install /code/onnxruntime/build/Linux/Release/dist/*.whl && \
    cd .. && \
    rm -rf onnxruntime

RUN python -c "import onnxruntime; print(onnxruntime.__version__)"

WORKDIR /app
COPY requirements/cpu.txt ./requirements/cpu.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install -r requirements/cpu.txt


# =========================================================
# Copy Source Code
# =========================================================
WORKDIR /app

COPY coco_classes.txt ./
COPY default_model default_model/
COPY default_model_6parts default_model_6parts/
COPY sample_video sample_video/
COPY scenario_models scenario_models/
RUN chmod 777 sample_video/video.mp4
RUN chmod 777 default_model

COPY api/__init__.py ./api/__init__.py
COPY api/models.py ./api/models.py
COPY config.py ./
COPY exception_handler.py ./
COPY logging_conf/logging_config.py ./logging_conf/logging_config.py
COPY model_wrapper.py ./
COPY object_detection.py ./
COPY object_detection2.py ./
COPY onnxruntime_predict.py ./
COPY server.py ./
COPY utility.py ./

EXPOSE 7777

CMD [ "python3", "server.py"]
