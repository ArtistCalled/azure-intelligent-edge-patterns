FROM mcr.microsoft.com/azureml/onnxruntime:v0.5.0-tensorrt19.06

#FROM nvidia/cuda:10.1-cudnn7-devel
WORKDIR /app

RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    libgtk2.0-dev \
    libssl-dev \
    libffi-dev \
    libboost-python-dev \
    libboost-filesystem-dev \
    libboost-thread-dev \
    python3-pip \
    libgl1-mesa-glx

RUN apt-get update \
    && DEBIAN_FRONTEND=noninteractive apt-get install -y locales \
    && sed -i -e 's/# en_US.UTF-8 UTF-8/en_US.UTF-8 UTF-8/' /etc/locale.gen \
    && dpkg-reconfigure --frontend=noninteractive locales \
    && update-locale LANG=en_US.UTF-8
ENV LANG en_US.UTF-8 
ENV LC_ALL en_US.UTF-8




ARG DEVICE

#Upgradin CUDA to 10.2
#RUN sudo apt-get install -y software-properties-common
#RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/cuda-ubuntu1604.pin
#RUN sudo mv cuda-ubuntu1604.pin /etc/apt/preferences.d/cuda-repository-pin-600
#RUN sudo apt-key adv --fetch-keys http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/7fa2af80.pub
#RUN sudo add-apt-repository "deb http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1604/x86_64/ /"
#RUN sudo apt-get update
#RUN sudo apt-get -y install cuda

RUN wget https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
RUN rm -rf /opt/miniconda
RUN bash Miniconda3-latest-Linux-x86_64.sh -b -p /opt/miniconda
COPY requirements.txt ./
ENV CONDA_ENV_NAME python38
RUN conda create --name python38 python=3.8.5 -y &&\
    . activate python38
RUN [ "/bin/bash", "-c", "source activate python38 && pip install --upgrade pip"]
RUN [ "/bin/bash", "-c", "source activate python38 && pip install opencv-python"]
RUN [ "/bin/bash", "-c", "source activate python38 && pip install onnxruntime-gpu"]
RUN [ "/bin/bash", "-c", "source activate python38 && pip install -r requirements.txt --ignore-installed"]

# RUN pip install --upgrade pip &&\
#     pip install -r requirements.txt --ignore-installed && \
#     pip install flask opencv-python onnx onnxruntime

ARG DEVICE


COPY arguments.py ./
COPY coco_classes.txt ./
COPY exception_handler.py ./
COPY extension_pb2.py ./
COPY extension_pb2_grpc.py ./
COPY inference_engine.py ./
COPY inferencing_pb2.py ./
COPY media_pb2.py ./
COPY model_wrapper.py ./
COPY server.py ./
COPY shared_memory.py ./

COPY main.py ./
COPY config.py ./
COPY object_detection.py ./
COPY object_detection2.py ./
COPY onnxruntime_predict.py ./
COPY utility.py ./
COPY default_model/cvexport.manifest default_model/
COPY default_model default_model/
COPY default_model_6parts default_model_6parts/
COPY sample_video sample_video/
COPY arguments.py ./
COPY exception_handler.py ./
COPY extension_pb2.py ./
COPY extension_pb2_grpc.py ./
COPY inference_engine.py ./
COPY inferencing_pb2.py ./
COPY media_pb2.py ./
COPY model_wrapper.py ./
COPY shared_memory.py ./
COPY server.py ./
COPY invoke.py ./
COPY stream_manager.py ./
COPY streams.py ./
COPY config.py ./
COPY webmodule_utils/*.py ./webmodule_utils/
COPY grpc_topology.json ./
COPY scenario_models scenario_models/
COPY sort.py ./
COPY tracker.py ./
COPY scenarios.py ./
RUN chmod 777 sample_video/video.mp4
RUN chmod 777 default_model


EXPOSE 5558
EXPOSE 5000

CMD [ "/bin/bash", "-c", "source activate python38 && python3 server.py -p 44000"]
#CMD [ "python3", "server.py", "-p", "44000" ]
