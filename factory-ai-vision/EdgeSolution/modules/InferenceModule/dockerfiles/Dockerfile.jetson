# syntax = docker/dockerfile:experimental
# =========================================================
# Base
# =========================================================
ARG BASE_IMAGE=nvcr.io/nvidia/l4t-base:r32.4.3
FROM ${BASE_IMAGE} as base

WORKDIR /app
ENV LANG=en_US.UTF-8
ENV LANGUAGE=en_US.UTF-8
ARG SYSTEM_CORES=4

# =========================================================
# Install system packages
# =========================================================
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        build-essential \
        cmake \
        git \
        wget \
        unzip \
        yasm \
        pkg-config \
        libtbb2 \
        libtbb-dev \
        libpq-dev \
        libprotobuf-dev \
        protobuf-compiler \
        libgeos-dev \
        ca-certificates \
        bzip2 \
        unzip \
        curl \
        libcurl4-openssl-dev \
        libssl-dev && \
    rm -rf /var/lib/apt/lists/*
# protobuf-compiler:   https://github.com/onnx/onnx#build-onnx-on-arm-64
# libprotobuf-dev:     https://github.com/onnx/onnx#build-onnx-on-arm-64
# libgeos-dev:         Shapely

# =========================================================
# Install Python package
# =========================================================
WORKDIR /code/
ARG MINIFORGE_VERSION=4.8.2-1
ENV CONDA_DIR=/opt/conda
ENV PATH=${CONDA_DIR}/bin:${PATH}

RUN wget --no-hsts \
        --quiet \
        https://github.com/conda-forge/miniforge/releases/download/${MINIFORGE_VERSION}/Miniforge3-${MINIFORGE_VERSION}-Linux-aarch64.sh \
        -O /tmp/miniforge.sh && \
    /bin/bash /tmp/miniforge.sh \
        -b \
        -p ${CONDA_DIR} && \
    rm /tmp/miniforge.sh && \
    conda clean -tipsy && \
    find ${CONDA_DIR} -follow -type f -name '*.a' -delete && \
    find ${CONDA_DIR} -follow -type f -name '*.pyc' -delete && \
    conda clean -afy

RUN conda create --name python38 python=3.8 && \
    echo ". ${CONDA_DIR}/etc/profile.d/conda.sh && conda activate python38" >> /etc/skel/.bashrc && \
    echo ". ${CONDA_DIR}/etc/profile.d/conda.sh && conda activate python38" >> ~/.bashrc
SHELL ["/bin/bash", "-c"]

# =========================================================
# Install Python package
# =========================================================
WORKDIR /app
COPY requirements/base.txt ./requirements/base.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    cp /usr/bin/make /usr/bin/make.bak && \
    echo "make.bak --jobs=${SYSTEM_CORES} \$@" > /usr/bin/make && \
    pip install --upgrade pip && \
    pip install wheel cython protobuf
# Workaround scikit image requires numpy while dependency is not resolved
RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install $(cat ./requirements/base.txt | grep numpy)
RUN mv /usr/bin/make.bak /usr/bin/make
RUN --mount=type=cache,target=/root/.cache/pip source activate python38 && pip install -r requirements/base.txt

# =========================================================
# Install onnxruntime
# =========================================================
WORKDIR /code/onnxruntime
COPY prebuild/jetson/onnxruntime_gpu_noopenmp-1.5.2-cp38-cp38-linux_aarch64.whl .
RUN source activate python38 && pip install onnxruntime_gpu_noopenmp-1.5.2-cp38-cp38-linux_aarch64.whl

# =========================================================
# Install opencv
# =========================================================
WORKDIR /app
COPY requirements/gpuarm64v8.txt ./requirements/gpuarm64v8.txt
RUN --mount=type=cache,target=/root/.cache/pip \
    cp /usr/bin/make /usr/bin/make.bak && \
    echo "make.bak --jobs=${SYSTEM_CORES} \$@" > /usr/bin/make && \
    source activate python38 && pip install -r requirements/gpuarm64v8.txt && \
    mv /usr/bin/make.bak /usr/bin/make

# =========================================================
# Shapely Work arount
# =========================================================
RUN cp /usr/lib/aarch64-linux-gnu/libgeos* /opt/conda/envs/python38/lib/

# =========================================================
# Copy Source Code
# =========================================================
WORKDIR /app
COPY coco_classes.txt ./
COPY default_model default_model/
COPY default_model_6parts default_model_6parts/
COPY grpc_topology.json ./
COPY http_topology.json ./
COPY sample_video sample_video/
COPY scenario_models scenario_models/
RUN chmod 777 sample_video/video.mp4
RUN chmod 777 default_model

COPY api/__init__.py ./api/__init__.py
COPY api/models.py ./api/models.py
COPY arguments.py ./
COPY config.py ./
COPY exception_handler.py ./
COPY extension_pb2.py ./
COPY extension_pb2_grpc.py ./
COPY http_inference_engine.py ./
COPY img.png ./
COPY inference_engine.py ./
COPY inferencing_pb2.py ./
COPY invoke.py ./
COPY logging_conf/logging_config.py ./logging_conf/logging_config.py
COPY main.py ./
COPY media_pb2.py ./
COPY model_wrapper.py ./
COPY object_detection.py ./
COPY object_detection2.py ./
COPY onnxruntime_predict.py ./
COPY scenarios.py ./
COPY server.py ./
COPY shared_memory.py ./
COPY sort.py ./
COPY stream_manager.py ./
COPY streams.py ./
COPY tracker.py ./
COPY utility.py ./

# =========================================================
# Run
# =========================================================
EXPOSE 5558
EXPOSE 5000

CMD [ "python3", "server.py", "-p", "44000"]
